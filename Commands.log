//I'm Following this HolaMundo tutorial https://www.youtube.com/watch?v=VdGzPZ31ts8

//Check Git's installed version
git --version

//Config name
git config --global user.name "LufwgDev"

//Config email
git config --global user.email lufwg@proton.me

//Indicate to git that vscode is your text editor by default
//the "--wait" option is so that the terminal stays waiting until you close your text editor
git config --global core.editor "code --wait"

//To see your global configuration file
 git config --global -e

//hint: Waiting for your editor to close the file... code --wait: line 1: code: command not found
//error: there was a problem with the editor 'code --wait'
code --version
//bash: code: command not found
//maybe is't because I just installed vscode, restart the pc again
code --version
//1.97.0
//33fc5a94a3f99ebe7087e8fe79fbe1d37a251016
//x64

//On Windows Every time you add a line break, the OS will add thw special characters to be able to mark that place as a line break
//it use the special characters "Carriage Return" or "CR" and also "Line Feed" or "LF" 
//On linux or Mac the special character that is added is only the "LF"
//If you are working with Windows and you want to upload code to a repository, you will have to eliminate the special character "CR"
//and if you want to download code from the repository, you should add the "CR" character
//the linux and Mac users are not adding the "CR", but if for some reason the user (due to the text editor that is using or because manually enterded the "CR" git should also be able to eliminate it

//in Windows
git config --global core.autocrlf true
//in linux or Mac
git config --global core.autocrlf input
//list of all configuration commands
git config -h

//to clear the terminal
clear

//L i S t all the files and folders that are located in the directory (folder) you are in
ls

//P lase  W here  D af*ck  i am
pwd

//move to another folder (inside the folder where you are)
//you can use tab to complete the name 
cd Desktop/

//to leave this folder (back to the folder that contains the actual)
cd ..

//create a folder (or  M a K e  a  DIR ectory)
mkdir "LearningGit"

//
cd LearningGit/

//INITialize the project
git init

//to show hidden files (like .git/)
ls -able

//to enter to the .git folder
cd .git/

//to see all the files that are used in git to manage your projects
ls -a

//
cd ..

//The WorkFlow is Computer -> Stage -> Commmit -> Server
//you can add delete, add or modify files and folders in your computer
//then, select the files you want to move (add) to "Stage"

//Stage it's like a draft of the list of changes you want to do, not only add or modified files, also the record of the files deleted
//you will be able to remove these elements from this stage

//then when you are sure about the changes you want to commit, to move to "Commit"

//finally upload the changes that you have committed to a server 

//open vscode
code .

//to show the current status of your repository
git status

//On branch master
//
//No commits yet
//
//Untracked files:
//  (use "git add <file>..." to include in what will be committed)
//        Commands.log
//        file1.txt
//
//nothing added to commit but untracked files present (use "git add" to track)

//git does not track all files you put in your project by default, to select them we use
//to add a file
git add file1.txt

//to select all the files with a extension ".extension"

git add .log
//fatal: pathspec '.log' did not match any files

git add .txt
//fatal: pathspec '.txt' did not match any files

//:c

//to add all the untracked files
git add .

//the files are now in Stage

//to add more than one file to our Stage
git add file2.txt file3.txt 

//we have modified file2.txt and file3.txt

//
git status
//On branch master
//
//No commits yet
//
//Changes to be committed:
//  (use "git rm --cached <file>..." to unstage)
//        new file:   Commands.log
//        new file:   file1.txt
//        new file:   file2.txt
//        new file:   file3.txt
//
//Changes not staged for commit:
//  (use "git add <file>..." to update what will be committed)
//  (use "git restore <file>..." to discard changes in working directory)
//        modified:   Commands.log
//        modified:   file2.txt
//        modified:   file3.txt

//the most recent chages in file2 and file3 are not in Stage. In Stage are only the modifications until the last time we use the command "git add" with every file,
//so if we commit the changes it will be commited only those that the file has at the moment of being added to Stage

//to update all the changes to Stage we use again
git add file2.txt file3.txt 


// to commit all the changes in Stages
git commit -m "Initial Commit"

//[master (root-commit) 45c563d] Initial Commit
// 4 files changed, 160 insertions(+)
// create mode 100644 Commands.log
// create mode 100644 file1.txt
// create mode 100644 file2.txt
// create mode 100644 file3.txt






git remote add origin https://github.com/LufwgDev/LearningGit.git

git push -u origin main

//error: src refspec main does not match any
//error: failed to push some refs to 'https://github.com/LufwgDev/LearningGit.git'

//
git status
//On branch master
//nothing to commit, working tree clean

//
git branch -M main

git push -u origin main

//info: please complete authentication in your browser...
//Enumerating objects: 6, done.
//Counting objects: 100% (6/6), done.
//Delta compression using up to 20 threads
//Compressing objects: 100% (3/3), done.
//Writing objects: 100% (6/6), 2.20 KiB | 2.20 MiB/s, done.
//Total 6 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0)
//To https://github.com/LufwgDev/LearningGit.git
// * [new branch]      main -> main
//branch 'main' set up to track 'origin/main'.





//
git add file2.txt 

//another  way to commit
git commit

//Adding Another Happy Bacon
//# Please enter the commit message for your changes. Lines starting
//# with '#' will be ignored, and an empty message aborts the commit.
//#
//# On branch main
//# Your branch is up to date with 'origin/main'.
//#
//# Changes to be committed:
//#	modified:   Commands.log
//#	modified:   file2.txt
//#

//[main 5b9438f] Adding Another Happy Bacon
// 2 files changed, 11 insertions(+), 1 deletion(-)

//
git status
//On branch main
//Your branch is ahead of 'origin/main' by 1 commit.
//  (use "git push" to publish your local commits)
//
//nothing to commit, working tree clean

//to   R e M ove   a file// to  R emove  M anually  a file
rm file3.txt

//
git status

//On branch main
//Your branch is ahead of 'origin/main' by 1 commit.
//  (use "git push" to publish your local commits)
//
//Changes not staged for commit:
//  (use "git add/rm <file>..." to update what will be committed)
//  (use "git restore <file>..." to discard changes in working directory)
//        modified:   Commands.log
//        deleted:    file3.txt
//
//no changes added to commit (use "git add" and/or "git commit -a")

//to add the new changes to Stage
git add file3.txt

//
git status
//On branch main
//Your branch is ahead of 'origin/main' by 1 commit.
//  (use "git push" to publish your local commits)
//
//Changes to be committed:
//  (use "git restore --staged <file>..." to unstage)
//        modified:   Commands.log
//        deleted:    file3.txt

//git commit -m "Deleting file3.txt"
//[main 16d7871] Deleting file3.txt
// 2 files changed, 56 insertions(+), 2 deletions(-)
// delete mode 100644 file3.txt

//
git status

//On branch main
//Your branch is ahead of 'origin/main' by 2 commits.
//  (use "git push" to publish your local commits)
//
//nothing to commit, working tree clean

// to remove a file and at the same time add this change to Stage
git rm file2.txt

//to remove a change form Stage 
git restore --staged file2.txt

//
git status
//On branch main
//Your branch is ahead of 'origin/main' by 2 commits.
//  (use "git push" to publish your local commits)
//
//Changes to be committed:
//  (use "git restore --staged <file>..." to unstage)
//        modified:   Commands.log
//
//Changes not staged for commit:
//  (use "git add/rm <file>..." to update what will be committed)
//  (use "git restore <file>..." to discard changes in working directory)
//        deleted:    file2.txt

//
ls
//Commands.log  file1.txt

//to discard changes (in the computer not in Stage)
git restore file2.txt

//
ls
//Commands.log  file1.txt  file2.txt

//rename a file
mv file1.txt File.txt

//
git status

//On branch main
//Your branch is up to date with 'origin/main'.
//
//Changes not staged for commit:
//  (use "git add/rm <file>..." to update what will be committed)
//  (use "git restore <file>..." to discard changes in working directory)
//        modified:   Commands.log
//        deleted:    file1.txt
//
//Untracked files:
//  (use "git add <file>..." to include in what will be committed)
//  
//        File.txt
//
//no changes added to commit (use "git add" and/or "git commit -a")

//git add file1.txt File.txt

//
git status
//On branch main
//Your branch is up to date with 'origin/main'.
//
//Changes to be committed:
//  (use "git restore --staged <file>..." to unstage)
//        renamed:    file1.txt -> File.txt
//
//Changes not staged for commit:
//  (use "git add <file>..." to update what will be committed)
//  (use "git restore <file>..." to discard changes in working directory)
//        modified:   Commands.log

//rename and add to stage at the same time
git mv File.txt file1.txt

//
git status

//On branch main
//Your branch is up to date with 'origin/main'.
//
//Changes to be committed:
//  (use "git restore --staged <file>..." to unstage)
//        modified:   Commands.log
//        renamed:    File.txt -> file1.txt
